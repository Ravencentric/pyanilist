[project]
name = "pyanilist"
version = "0.5.2"
description = "AniList API wrapper to fetch media data"
authors = [{ name = "Ravencentric", email = "me@ravencentric.cc" }]
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
keywords = ["anilist", "anime", "python"]
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dependencies = [
    "backports-strenum>=1.3.1 ; python_full_version < '3.11'",
    "boltons>=24.0.0",
    "html2text>=2024.2.26",
    "httpx>=0.27.2",
    "nh3>=0.2.18",
    "pycountry>=24.6.1",
    "pydantic>=2.9.2",
    "pydantic-extra-types>=2.9.0",
    "stamina>=24.3.0",
    "typing-extensions>=4.12.2",
]

[project.urls]
Homepage = "https://pyanilist.ravencentric.cc"
Documentation = "https://pyanilist.ravencentric.cc"
Repository = "https://github.com/Ravencentric/pyanilist"

[tool.uv]
dev-dependencies = [
    "coverage>=7.6.2",
    "mkdocs-autorefs>=1.2.0",
    "mkdocs-material>=9.5.40",
    "mkdocstrings[python]>=0.26.1",
    "mypy>=1.11.2",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.6.9",
    "types-boltons>=24.0.0.20240423",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
extend-select = ["I"]
fixable = ["ALL"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.mypy]
strict = true
pretty = true
exclude = "tests/"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.coverage.run]
omit = [
    "src/pyanilist/_version.py",
    "src/pyanilist/_compat.py",
    "tests/*"
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]
